version: '3.8'

services:
  room-service:
    image: room_service
    build:
      context: ./RoomService
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/room_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - backend

  booking-service:
    image: booking_service
    build:
      context: ./BookingService
    ports:
      - "8086:8086"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/booking_service_db
    depends_on:
      - mongo
    networks:
      - backend

  user-service:
    image: user_service
    build:
      context: ./UserService
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/user_service_db
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
    depends_on:
      - postgres
    networks:
      - backend

  event-service:
    image: event_service
    build:
      context: ./EventService
    ports:
      - "8091:8091"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/event_service_db
    depends_on:
      - mongo
    networks:
      - backend

  approval-service:
    image: approval_service
    build:
      context: ./ApprovalService
    ports:
      - "8089:8089"
    environment:
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/approval_service_db
    depends_on:
      - mongo
    networks:
      - backend

  postgres:
    image: postgres
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Mount the postgres-init folder from the root directory to initialize databases
      - ./postgres-init:/docker-entrypoint-initdb.d/init-db.sh  # Mount init scripts to run during container initialization
    networks:
      - backend

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - backend

  mongo-express:
    image: mongo-express
    ports:
      - "8090:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
    depends_on:
      - mongo
    networks:
      - backend

networks:
  backend:

volumes:
  postgres_data:
  mongo_data:
