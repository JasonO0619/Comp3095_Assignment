
services:
  # ROOM-SERVICE
  room-service:
    image: room_service
    build:
      context: ./RoomService
    ports:
      - "8085:8085"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - room-service-postgres
    networks:
      - backend

  room-service-postgres:
    image: postgres
    container_name: room-service-postgres
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: room_service_db
    volumes:
      - ./data/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  room-service-pgadmin:
    image: dpage/pgadmin4
    container_name: room-service-pgadmin4
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    networks:
      - backend

  # BOOKING-SERVICE
  booking-service:
    image: booking_service
    build:
      context: ./BookingService
    ports:
      - "8086:8086"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - booking-service-mongodb
    networks:
      - backend

  booking-service-mongodb:
    image: mongo
    container_name: booking-service-mongodb
    ports:
      - "27019:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: booking_service_db
    volumes:
      - ./data/booking:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - backend

  booking-service-express:
    image: mongo-express
    container_name: booking-service-express
    ports:
      - "8091:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: booking-service-mongodb
    depends_on:
      - booking-service-mongodb
    networks:
      - backend

  # USER-SERVICE
  user-service:
    image: user_service
    build:
      context: ./UserService
    ports:
      - "8087:8087"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - user-service-postgres
    networks:
      - backend

  user-service-postgres:
    image: postgres
    container_name: user-service-postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_service_db
    volumes:
      - ./data/user:/var/lib/postgresql/data
      - ./init/user/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  user-service-pgadmin:
    image: dpage/pgadmin4
    container_name: user-service-pgadmin4
    ports:
      - "8889:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.ca
      PGADMIN_DEFAULT_PASSWORD: password
    networks:
      - backend

  # EVENT-SERVICE
  event-service:
    image: event_service
    build:
      context: ./EventService
    ports:
      - "8095:8095"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - event-service-mongodb
    networks:
      - backend

  event-service-mongodb:
    image: mongo
    container_name: event-service-mongodb
    ports:
      - "27021:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: event_service_db
    volumes:
      - ./data/event:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/event-init.js:/docker-entrypoint-initdb.d/event-init.js
    networks:
      - backend

  # APPROVAL-SERVICE
  approval-service:
    image: approval_service
    build:
      context: ./ApprovalService
    ports:
      - "8089:8089"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - approval-service-mongodb
    networks:
      - backend

  approval-service-mongodb:
    image: mongo
    container_name: approval-service-mongodb
    ports:
      - "27020:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: approval_service_db
    volumes:
      - ./data/approval:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/approval-init.js:/docker-entrypoint-initdb.d/approval-init.js
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
